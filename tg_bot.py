import sqlite3
import time

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

from collections import Counter
import prettytable as pt

from config import TG_TOKEN, TG_PAYMENTS_TOKEN, SUPER_ADMIN_ID, bot, PAYMENTS_TOKEN
from database_functions import insert_user_to_db, check_password, get_dishes_list
from admins import check_rights, check_admins, super_admin, add_id, dict_admins


# bot = telebot.TeleBot(TG_TOKEN)
# PAYMENTS_TOKEN = TG_PAYMENTS_TOKEN

menu = ['–ë—É—Ä–≥–µ—Ä—ãüçî', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—åüçü', '–°–Ω–µ–∫–∏ü•ì', '–°–æ—É—Å—ãü•´', '–ù–∞–ø–∏—Ç–∫–∏ü•§', '–î–µ—Å–µ—Ä—Ç—ãüçß']

user_data = {}
user_order = {}


def menu_kb():
    kb = InlineKeyboardMarkup()
    for dish in menu:
        btn = InlineKeyboardButton(text=dish, callback_data='1' + dish)
        kb.add(btn)
    return kb


def make_table(dct: dict):
    """ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã """
    all_dishes = []
    for key, value in dct.items():
        for i in value:
            all_dishes.append(i)
    smth = Counter(all_dishes)
    table = pt.PrettyTable()
    table.field_names = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞']
    table._max_width = {"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": 20}
    table.align['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = 'l'
    table.align['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = 'r'
    table.align['–¶–µ–Ω–∞'] = 'r'
    table.align['–°—É–º–º–∞'] = 'r'

    name_and_count = []

    for k, v in smth.items():
        name_and_count.append((k, v))

    conn = sqlite3.connect('mcdonalds.db')
    cursor = conn.cursor()
    select_query = """ SELECT name, price FROM Dishes """
    cursor.execute(select_query)
    price_list = cursor.fetchall()

    new_price_list = []
    for i in name_and_count:
        for j in price_list:
            if j[0] == i[0]:
                price_tuple = (j[1][:-1],)
                new_price_list.append(price_tuple)

    res = [(x + y) for x, y in zip(name_and_count, new_price_list)]

    data = []
    for i in res:
        sum_str = str(float(i[1]) * float(i[2]))
        sum_tuple = (sum_str,)
        record = i + sum_tuple
        data.append(record)

    total = 0
    for i in data:
        total += float(i[-1])

    table.add_rows(data)
    table.add_row(['', '', '', ''])
    table.add_row(['', '', '–ò—Ç–æ–≥–æ', f'{total}'])

    text = f'<pre>{table}</pre>'
    return text, total


def make_order_description(order_dishes: dict) -> str:
    """ –ü—Ä–æ—Å—Ç–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: –ë–ª—é–¥–æ —Ö –∫–æ–ª-–≤–æ """
    all_ordered_dishes = []
    for key, value in order_dishes.items():
        for i in value:
            all_ordered_dishes.append(i)
    smth = Counter(all_ordered_dishes)

    order_description = ''
    for k, v in smth.items():
        order_description += f'{k} x{v}\n'
    return order_description


@bot.callback_query_handler(func=lambda callback: callback.data == 'pay')
def buy(call):
    _, amount = make_table(user_order[call.message.chat.id])
    amount = int(amount * 10)
    print(amount)
    PRICE = LabeledPrice(label="–ó–∞–∫–∞–∑ –≤ McDonald's", amount=amount * 10)

    bot.send_message(call.message.chat.id, text="‚ÄºÔ∏è–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å 'BYN', "
                                                "–ø–æ—ç—Ç–æ–º—É –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ 'RYB', –Ω–æ —Ü–µ–Ω–∞ –ø–æ—Å—á–∏—Ç–∞–Ω–∞ –≤ 'BYN'!")

    bot.send_invoice(call.message.chat.id,
                     title="–ó–∞–∫–∞–∑ –≤ McDonald's",
                     description=make_order_description(user_order[call.message.chat.id]),
                     provider_token=PAYMENTS_TOKEN,
                     currency='rub',
                     # photo_url='',
                     # photo_width=415,
                     # photo_height=235,
                     # photo_size=415,
                     is_flexible=False,
                     prices=[PRICE],
                     start_parameter='mcdonalds-order',
                     invoice_payload='test-invoice-payload')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    print('successful_payment')
    bot.send_message(message.chat.id,
                     f'–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ\n'
                     '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–∫–∞–∑!\n'
                     '–ó–∞–∫–∞–∑ –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30-35 –º–∏–Ω\n'
                     '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ !!!')
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(text='–î–∞', callback_data='review+'),
        InlineKeyboardButton(text='–ù–µ—Ç', callback_data='review-')
    )
    time.sleep(2)
    bot.send_message(message.chat.id, text='–°–ø—É—Å—Ç—è 2-3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞...')
    time.sleep(2)
    bot.send_message(message.chat.id, text='–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <b>–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç "–±–ª—é–¥–∞—Ö", –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏.</b>\n'
                                           '–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä\n'
                                           '–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 15% –Ω–∞ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑)\n'
                                           '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', parse_mode='HTML', reply_markup=kb)

def get_review(message):
    review_text = message.text
    print(review_text)
    bot.forward_message(SUPER_ADMIN_ID, message.chat.id, message.message_id)
    bot.send_message(message.chat.id, text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ç–∑—ã–≤!')


@bot.message_handler(content_types=["text"])
def start(message):
    if message.text == '/start':
        user_data[message.chat.id] = {}
        user_order[message.chat.id] = {}

        bot.send_message(message.chat.id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã, –≤ —Å–ª—É—á–∞–µ –ø–ª–æ—Ö–æ–≥–æ –æ—Ç–∑—ã–≤–∞, —è —Å–º–æ–≥ —Ç–µ–±—è –Ω–∞–π—Ç–∏ :)')
        time.sleep(2)
        msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å - –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–∞–∫–∏–π –≤—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        bot.register_next_step_handler(msg, get_password)
    elif message.text == "":
        bot.send_message(message.chat.id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start')

    # ----------------------------------------------------------------------------------------------
    elif message.text == '/check':
        check_admins(message)

    elif message.text == '/admin':  # —á–∏—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        rights = check_rights(message.from_user.id)
        if rights == True:
            bot.send_message(message.from_user.id, "–í—ã SuperAdmin, –≤ —Ç–≤–æ–∏—Ö —Å–∏–ª–∞—Ö ", reply_markup=super_admin)
        elif rights == False:
            bot.send_message(message.from_user.id, "–í—ã Admin, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Ä–µ—à–∞—Ç—å –∏—Ö –≤–æ–ø—Ä–æ—Å—ã ")
        else:
            bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ê–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞"
                                                   "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫—É –≤—Å–µ–≥–æ –∑–∞ 5$ –∏ 99‚Ç¨")

    elif message.text == '/add_admin':
        if check_rights(message.from_user.id) == True:
            msg = bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ")
            bot.register_next_step_handler(msg, add_id)
    # ----------------------------------------------------------------------------------------------

def get_password(message):
    password = message.text
    print(password)

    check_user_in_db = check_password(password)
    if check_user_in_db:
        # name =  –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç –±—Ä–∞—Ç—å –∏–∑ –ë–î
        bot.send_message(message.chat.id, text=f'–¢–µ–±—è —è –∑–Ω–∞—é !–ü—Ä–∏–≤–µ—Ç!', reply_markup=menu_kb())
    else:
        user_data[message.chat.id]['password'] = password
        msg = bot.send_message(message.chat.id, text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(msg, get_username)


def get_username(message):
    username = message.text
    print(username)
    user_data[message.chat.id]['username'] = username
    msg = bot.send_message(message.chat.id, text="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    bot.register_next_step_handler(msg, get_userage)


def get_userage(message):
    userage = message.text
    print(userage)
    user_data[message.chat.id]['age'] = userage
    msg = bot.send_message(message.chat.id, text="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω? (–§–æ—Ä–º–∞—Ç: +375(–•–•)–£–£–£–£–£–£–£")
    bot.register_next_step_handler(msg, get_phone_number)


def get_phone_number(message):
    phone_number = message.text
    print(phone_number)
    user_data[message.chat.id]['phone'] = phone_number
    msg = bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å? –§–æ—Ä–º–∞—Ç: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
                                                 "(–í–≤–µ–¥–µ—à—å –∫–æ—Ä—è–≤–æ - –∫—É—Ä—å–µ—Ä —Ö–µ—Ä —Ç–µ–±—è –Ω–∞–π–¥—ë—Ç! –í —Ç–≤–æ–∏—Ö –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö).")
    bot.register_next_step_handler(msg, get_address)


def get_address(message):
    address = message.text
    user_data[message.chat.id]['address'] = address

    insert_user_to_db(user_data[message.chat.id])
    print("–Æ–∑–µ—Ä –≤ –±–∞–∑–µ –¥–ª—è —é–∑–µ—Ä–æ–≤")

    bot.send_message(message.chat.id, text="–ê —Ç–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∏ cvc-–∫–æ–¥")
    time.sleep(2)
    bot.send_message(message.chat.id, text="üòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n–®–£–ß–£..!")
    time.sleep(2)
    bot.send_message(message.chat.id, text='–í–æ—Ç –Ω–∞—à–µ –ú–ï–ù–Æ', reply_markup=menu_kb())

    print(user_data)


@bot.callback_query_handler(func=lambda call: True)
def main_menu_answer(call):
    print(call.data)
    flag = call.data[0]
    data = call.data[1:]

    if flag == '1':
        if data[:-1] == '–ë—É—Ä–≥–µ—Ä—ã':
            burgers_kb = InlineKeyboardMarkup()                     # –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é?
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'burger' + ',' + i[0])
                burgers_kb.add(btn)
            burgers_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=burgers_kb)

        if data[:-1] == '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å':
            french_fries_kb = InlineKeyboardMarkup()
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'potato' + ',' + i[0])
                french_fries_kb.add(btn)
            french_fries_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=french_fries_kb)

        if data[:-1] == '–°–Ω–µ–∫–∏':
            snacks_kb = InlineKeyboardMarkup()
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'snack' + ',' + i[0])
                snacks_kb.add(btn)
            snacks_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=snacks_kb)

        if data[:-1] == '–°–æ—É—Å—ã':
            sauces_kb = InlineKeyboardMarkup()
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'sauce' + ',' + i[0])
                sauces_kb.add(btn)
            sauces_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=sauces_kb)

        if data[:-1] == '–ù–∞–ø–∏—Ç–∫–∏':
            drinks_kb = InlineKeyboardMarkup()
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'drink' + ',' + i[0])
                drinks_kb.add(btn)
            drinks_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=drinks_kb)

        if data[:-1] == '–î–µ—Å–µ—Ä—Ç—ã':
            dessert_kb = InlineKeyboardMarkup()
            dishes_by_categories = get_dishes_list(data[:-1])
            for i in dishes_by_categories:
                btn = InlineKeyboardButton(text=f'{i[0]} - {i[1]}', callback_data='2' + ',' + 'dessert' + ',' + i[0])
                dessert_kb.add(btn)
            dessert_kb.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüîô', callback_data='b'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=dessert_kb)

        if len(user_order[call.message.chat.id].keys()) == 0:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton(text='‚úÖ', callback_data='yes'))
            bot.send_message(call.message.chat.id, text='–ú–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑?', reply_markup=kb)

    if flag == '2':
        bot.answer_callback_query(callback_query_id=call.id, text="–î–æ–±–∞–≤–ª–µ–Ω–æ!", show_alert=False)
        if call.data.split(',')[1] == 'burger':
            if 'burger' not in user_order[call.message.chat.id]:                 # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é?
                user_order[call.message.chat.id]['burger'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['burger'].append(call.data.split(',')[2])
            print(user_order)
        if call.data.split(',')[1] == 'potato':
            if 'potato' not in user_order[call.message.chat.id]:
                user_order[call.message.chat.id]['potato'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['potato'].append(call.data.split(',')[2])
            print(user_order)
        if call.data.split(',')[1] == 'snack':
            if 'snack' not in user_order[call.message.chat.id]:
                user_order[call.message.chat.id]['snack'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['snack'].append(call.data.split(',')[2])
            print(user_order)
        if call.data.split(',')[1] == 'sauce':
            if 'sauce' not in user_order[call.message.chat.id]:
                user_order[call.message.chat.id]['sauce'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['sauce'].append(call.data.split(',')[2])
            print(user_order)
        if call.data.split(',')[1] == 'drink':
            if 'drink' not in user_order[call.message.chat.id]:
                user_order[call.message.chat.id]['drink'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['drink'].append(call.data.split(',')[2])
            print(user_order)
        if call.data.split(',')[1] == 'dessert':
            if 'dessert' not in user_order[call.message.chat.id]:
                user_order[call.message.chat.id]['dessert'] = [call.data.split(',')[2]]
            else:
                user_order[call.message.chat.id]['dessert'].append(call.data.split(',')[2])
            print(user_order)

    if call.data == 'yes':
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(text='–î–∞, –≤–µ—Ä–Ω–æüëçüèª', callback_data='pay'),
            InlineKeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å‚úèÔ∏è', callback_data='change'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', callback_data='cancel')
            )
        table, _ = make_table(user_order[call.message.chat.id])
        bot.send_message(call.message.chat.id, text="–í–ê–® –ó–ê–ö–ê–ó\n" + table, parse_mode='HTML')
        bot.send_message(call.message.chat.id, text='–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb)

    if call.data == 'change':
        ordered_dishes = []
        for key, value in user_order[call.message.chat.id].items():
            for i in value:
                ordered_dishes.append(i)

        kb = InlineKeyboardMarkup()
        for dish in ordered_dishes:
            btn = InlineKeyboardButton(text=dish, callback_data='C' + dish)
            kb.add(btn)
        kb.add(
            InlineKeyboardButton(text='–ú–µ–Ω—éüßæ', callback_data='b'),
            InlineKeyboardButton(text='–ö –æ–ø–ª–∞—Ç–µüí≥', callback_data='pay')
        )
        bot.send_message(call.message.chat.id, text='–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–±—Ä–∞—Ç—å.', reply_markup=kb)

    if flag == 'C':
        bot.answer_callback_query(callback_query_id=call.id, text="–£–¥–∞–ª–µ–Ω–æ!", show_alert=False)
        user_order_copy = user_order[call.message.chat.id].copy()

        for k, v in user_order_copy.items():
            for i in user_order_copy.keys():
                if i == k and data in v:
                    user_order_copy[i].remove(data)

        ordered_dishes = []
        for key, value in user_order_copy.items():
            for i in value:
                ordered_dishes.append(i)

        if ordered_dishes:
            kb = InlineKeyboardMarkup()
            for dish in ordered_dishes:
                btn = InlineKeyboardButton(text=dish, callback_data='C' + dish)
                kb.add(btn)
            kb.add(
                InlineKeyboardButton(text='–ú–µ–Ω—éüßæ', callback_data='b'),
                InlineKeyboardButton(text='–ö –æ–ø–ª–∞—Ç–µüí≥', callback_data='pay')
                )
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–±—Ä–∞—Ç—å.', reply_markup=kb)

        else:
            kb = InlineKeyboardMarkup()
            kb.add(
                InlineKeyboardButton(text='–ú–µ–Ω—éüßæ', callback_data='b'),
                InlineKeyboardButton(text='–ü–µ—Ä–µ–¥—É–º–∞–ª..', callback_data='wait')
                   )
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–¥–∞–ª–∏–ª, –±—Ä–æ..', reply_markup=kb)

    if call.data == 'cancel':
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(text='–î–∞–≤–∞–π', callback_data='b'),
            InlineKeyboardButton(text='–ù–µ—Ç', callback_data='offended')
        )
        photo = open("D:\EXAM\photos\sadness.jpg", 'rb')
        bot.send_photo(call.message.chat.id, photo=photo, caption='–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫?', reply_markup=kb)

    if call.data == 'wait':
        photo = open("D:\EXAM\photos\be_waiting_for.jpg", 'rb')
        bot.send_photo(call.message.chat.id, photo=photo)

    if call.data == 'offended':
        photo = open("D:\EXAM\photos\offended.jpg", 'rb')
        bot.send_photo(call.message.chat.id, photo=photo)

    if call.data == 'review+':
        msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í–∞—à –æ—Ç–∑—ã–≤üëá')
        bot.register_next_step_handler(msg, get_review)

    if flag == 'b':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—à–µ –º–µ–Ω—é', reply_markup=kb)

# -----------------------------------------------------------------------------------------------------------
#     if flag == "A":  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∞
#         if check_rights(call.message.chat.id):
#             bot.send_message(call.message.chat.id, "–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/add_admin' ")
#
#     if flag == "D":  # —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
#         if check_rights(call.message.chat.id):
#
#             admin_del = InlineKeyboardMarkup()
#             for i, n in dict_admins.items():
#                 admin_del.add(InlineKeyboardButton(n["name"], callback_data="d" + str(i)))
#             bot.send_message(call.message.chat.id, " –ö–æ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å? ", reply_markup=admin_del)
#
#     if flag == "d":  # —É–¥–∞–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∞
#         if check_rights(call.message.chat.id):
#             rmk = InlineKeyboardMarkup()
#             rmk.add(InlineKeyboardButton("–î–∞, —Ç–æ—á–Ω–æ", callback_data="1" + str(data)),
#                     InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ", callback_data="2"))
#             name = dict_admins[str(data)]["name"]
#             bot.send_message(call.message.chat.id, f" –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {name} –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤? ", reply_markup=rmk)
#
#     elif flag == "1":
#         dict_admins.pop(data)
#         bot.send_message(call.message.chat.id, " –•–æ—Ä–æ—à–æ. –ú—ã —É–¥–∞–ª–∏–ª–∏ –µ–≥–æ ")
#         check_admins(call.message.chat.id)
#
#     elif flag == "2":
#         bot.send_message(call.message.chat.id, " –•–æ—Ä–æ—à–æ. –ù–µ –±—É–¥–µ–º ")
#         check_admins(call.message.chat.id)
#
#     elif flag == "E":  # —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –ø—Ä–∞–≤
#         if check_rights(call.message.chat.id):
#
#             admin_edit = InlineKeyboardMarkup()
#             for i, n in dict_admins.items():
#                 admin_edit.add(InlineKeyboardButton(n["name"], callback_data="e" + str(i)))
#             bot.send_message(call.message.chat.id, " –ü—Ä–∞–≤–∞ –∫–æ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ", reply_markup=admin_edit)
#
#     elif flag == "e":  # —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤
#         decision = InlineKeyboardMarkup()
#         decision.add(InlineKeyboardButton(f"–°–¥–µ–ª–∞—Ç—å {dict_admins[str(data)]['name']} SuperAdmin'–æ–º? ",
#                                           callback_data="3" + str(data)))
#         decision.add(InlineKeyboardButton(f"–°–¥–µ–ª–∞—Ç—å {dict_admins[str(data)]['name']} Admin'–æ–º? ",
#                                           callback_data="4" + str(data)))
#         decision.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {dict_admins[str(data)]['name']} –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤? ",
#                                           callback_data="d" + str(data)))
#         bot.send_message(call.message.chat.id, f' –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å {dict_admins[str(data)]["name"]} ?',
#                          reply_markup=decision)
#
#     elif flag == "3":  # –ø—Ä–∞–≤–∞ SuperAdmin
#         if check_rights(id):
#             dict_admins[str(data)]["rights"] = True
#             bot.send_message(call.message.chat.id, f' –¢–µ–ø–µ—Ä—å {dict_admins[str(data)]["name"]} - SuperAdmin')
#             check_admins(id)
#
#     elif flag == "4":  # –ø—Ä–∞–≤–∞ Admin'–∞
#         if check_rights(id):
#             dict_admins[str(data)]["rights"] = False
#             bot.send_message(call.message.chat.id, f' –¢–µ–ø–µ—Ä—å {dict_admins[str(data)]["name"]} - Admin')
#             check_admins(id)

# -----------------------------------------------------------------------------------------------------------

print('ready')
bot.polling()
