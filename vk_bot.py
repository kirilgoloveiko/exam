import json
import sqlite3
from collections import Counter

from vk_api import VkApi
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from database_functions import check_password, insert_user_to_db
from config import VK_TOKEN, VK_GROUP_ID, VK_API_VERSION


# –û–±—â–∏–µ
GROUP_ID = VK_GROUP_ID
TOKEN = VK_TOKEN
API_VERSION = VK_API_VERSION

# –≤–∏–¥—ã callback-–∫–Ω–æ–ø–æ–∫
CALLBACK_TYPES = ("show_snackbar", "open_link")

user_data = {}
user_order = {}

category_list = ['–ë—É—Ä–≥–µ—Ä—ãüçî', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—åüçü', '–°–Ω–µ–∫–∏ü•ì', '–°–æ—É—Å—ãü•´', '–ù–∞–ø–∏—Ç–∫–∏ü•§', '–î–µ—Å–µ—Ä—Ç—ãüçß']


def dishes_by_categories(category_list: list) -> dict:
    conn = sqlite3.connect('mcdonalds.db')
    cursor = conn.cursor()
    d = {}
    for cat in category_list:
        query = f""" select name from Dishes
                     join DishCategories
                        on Dishes.category_id = DishCategories.category_id
                     where category_name = '{cat[:-1]}' """
        cursor.execute(query)
        list_of_tuples = cursor.fetchall()
        dishes = []
        for tuple in list_of_tuples:
            for i in tuple:
                dishes.append(i)
        d[cat[:-1]] = dishes
    return d


def name_and_price_for_dish_btn(category: str):
    conn = sqlite3.connect('mcdonalds.db')
    cursor = conn.cursor()
    dishes_name_and_price = []
    query = f""" select name, price from Dishes
                join DishCategories
                    on Dishes.category_id = DishCategories.category_id
                where category_name = '{category}' """
    cursor.execute(query)
    list_of_tuples = cursor.fetchall()
    for i in list_of_tuples:
        btn_text = f'{i[0]} - {i[1]}'
        dishes_name_and_price.append(btn_text)
    return dishes_name_and_price


def keyb_gen(list, num, flag, ind=None, fix_pos=5):
    kb = VkKeyboard(inline=True)

    if fix_pos * (num + 1) > len(list):
        t = len(list)
    else:
        t = fix_pos * (num + 1)

    for i in range(fix_pos * num, t):
        kb.add_button(label=list[i], color=VkKeyboardColor.SECONDARY, payload={"type": "text"})
        kb.add_line()

    if num == 0 and t != len(list):
        kb.add_callback_button(label="–ú–µ–Ω—é", color=VkKeyboardColor.PRIMARY, payload={"type": "m"})      # m - menu
        kb.add_callback_button(label='–î–∞–ª—å—à–µ', color=VkKeyboardColor.PRIMARY, payload={"type": "n", "num": num+1, "flag": flag, "flag2": ind})
        kb.add_callback_button(label="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", color=VkKeyboardColor.POSITIVE, payload={"type": "o"})   # o - order
    elif t == len(list):
        kb.add_callback_button(label="–ú–µ–Ω—é", color=VkKeyboardColor.PRIMARY, payload={"type": "m"})
        kb.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "b", "num": num-1, "flag": flag, "flag2": ind})
        kb.add_callback_button(label="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", color=VkKeyboardColor.POSITIVE, payload={"type": "o"})
    elif num != 0 and t != len(list):
        kb.add_callback_button(label='–î–∞–ª—å—à–µ', color=VkKeyboardColor.PRIMARY, payload={"type": "n", "num": num+1, "flag": flag, "flag2": ind})
        kb.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "b", "num": num-1, "flag": flag, "flag2": ind})
    return kb



def make_order_description(order_dishes: dict) -> str:
    """ –ü—Ä–æ—Å—Ç–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: –ë–ª—é–¥–æ —Ö –∫–æ–ª-–≤–æ """
    all_ordered_dishes = []
    for key, value in order_dishes.items():
        for i in value:
            all_ordered_dishes.append(i)
    smth = Counter(all_ordered_dishes)

    order_description = ''
    for k, v in smth.items():
        order_description += f'{k} x{v}\n'

    return order_description


def save_data(vk_obj, container: dict, user_id, key):
    while True:
        message = vk_obj.messages.getConversations(offset=0, count=1, filter='unread')['items']
        if message:
            text = message[0]['last_message']['text']
            container[user_id][key] = text
            break


def menu_kb():
    kb = VkKeyboard(inline=True)
    kb.add_button(label="–ú–µ–Ω—é!", color=VkKeyboardColor.PRIMARY, payload={"type": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"})
    return kb


def order_kb():
    kb = VkKeyboard(inline=True)
    kb.add_button(label="–î–∞, –≤–µ—Ä–Ω–æ!", color=VkKeyboardColor.POSITIVE, payload={"type": "y"})    # y - yes
    kb.add_button(label="–û—Ç–º–µ–Ω–∏—Ç—å", color=VkKeyboardColor.NEGATIVE, payload={"type": "c"})      # c - cancel
    return kb


def poll_kb():
    kb = VkKeyboard(inline=True)
    kb.add_button(label="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", color=VkKeyboardColor.PRIMARY, payload={"type": "poll"})
    return kb


text_inst = """
MCDONALDS —Ç–æ–∂–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω !
1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
2. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –∞–∫—Ü–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É : "–ù–∞—à —Å–∞–π—Ç"
"""

# 1 –≤–æ–ø—Ä–æ—Å
QUESTION_1 = '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å - –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–∞–∫–∏–π –≤—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
# 2 –≤–æ–ø—Ä–æ—Å
QUESTION_2 = '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
# 3 –≤–æ–ø—Ä–æ—Å
QUESTION_3 = '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?'
# 4 –≤–æ–ø—Ä–æ—Å
QUESTION_4 = '–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +375XXYYYYYYY)?'
# 3 –≤–æ–ø—Ä–æ—Å
QUESTION_5 = '–ê–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?'


def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    vk_session = VkApi(token=TOKEN, api_version=API_VERSION)
    vk = vk_session.get_api()
    longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_kb = VkKeyboard(one_time=True)
    main_menu_kb.add_button(label='–ú–µ–Ω—é!',
                            color=VkKeyboardColor.NEGATIVE,
                            payload={"type": "text"})
    main_menu_kb.add_line()
    main_menu_kb.add_callback_button(label='–ù–∞—à —Å–∞–π—Ç!',
                                     color=VkKeyboardColor.POSITIVE,
                                     payload={"type": "open_link",
                                              "link": "https://ksbv.by/ru/"})
    main_menu_kb.add_line()
    main_menu_kb.add_callback_button(label='–ú—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ!',
                                     color=VkKeyboardColor.PRIMARY,
                                     payload={"type": "open_link", "link": "https://t.me/my_mcdonalds_bot"})

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª–ª–∏–Ω–≥
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            if event.obj.message["text"] != "":
                if event.from_user:
                    # print(event)
                    if event.obj.message['text'] == 'start':
                        user_id = event.obj.message['from_id']
                        user_data[user_id] = {}
                        print(user_data)

                        vk.messages.send(
                            user_id=user_id,
                            random_id=get_random_id(),
                            peer_id=user_id,
                            keyboard=poll_kb().get_keyboard(),
                            message=text_inst + '\n\n–ù–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å',
                        )
                    elif event.obj.message['text'] == '–ú–µ–Ω—é!':
                        vk.messages.send(
                            user_id=user_id,
                            random_id=get_random_id(),
                            peer_id=user_id,
                            keyboard=keyb_gen(list=category_list, num=0, flag=1).get_keyboard(),
                            message='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥',
                        )
                    for cat in category_list:
                        if event.obj.message['text'] == cat:
                            ind = category_list.index(cat)
                            vk.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                peer_id=user_id,
                                keyboard=keyb_gen(list=name_and_price_for_dish_btn(cat[:-1]), num=0, flag=2, ind=ind).get_keyboard(),
                                message="–í—ã–±–µ—Ä–∏ '–±–ª—é–¥–æ'",
                            )
                        elif event.obj.message['text'].split('-')[0][:-1] in dishes_by_categories(category_list)[cat[:-1]]:
                            dish = event.obj.message['text'].split('-')[0][:-1]
                            # user_order[event.obj.message['from_id']] = {}

                            if cat[:-1] not in user_order:
                                user_order[cat[:-1]] = [dish]
                            else:
                                user_order[cat[:-1]].append(dish)
                            print(user_order)

                    if event.obj.message['text'] == '–î–∞, –≤–µ—Ä–Ω–æ!':
                        vk.messages.send(
                            user_id=user_id,
                            random_id=get_random_id(),
                            peer_id=user_id,
                            message='–¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø–ª–∞—Ç–∞',
                        )
                    if event.obj.message['text'] == '–û—Ç–º–µ–Ω–∏—Ç—å':
                        vk.messages.send(
                            user_id=user_id,
                            random_id=get_random_id(),
                            peer_id=user_id,
                            message='–û—á–µ–Ω—å –∂–∞–ª—å..',
                        )
                    if event.obj.message['text'] == '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å':

                        # –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å user_data
                        vk.messages.send(user_id=user_id, random_id=get_random_id(), message=QUESTION_1)
                        save_data(vk_obj=vk, container=user_data, user_id=user_id, key='password')

                        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª—è –≤ –ë–î
                        password = user_data[user_id]['password']
                        check_user_in_db = check_password(password)
                        if check_user_in_db:
                            vk.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                keyboard=main_menu_kb.get_keyboard(),
                                message="–¢–µ–±—è —è –∑–Ω–∞—é! –ü—Ä–∏–≤–µ—Ç!"
                            )
                        else:
                            vk.messages.send(user_id=user_id, random_id=get_random_id(), message=QUESTION_2)
                            save_data(vk_obj=vk, container=user_data, user_id=user_id, key='name')

                            vk.messages.send(user_id=user_id, random_id=get_random_id(), message=QUESTION_3)
                            save_data(vk_obj=vk, container=user_data, user_id=user_id, key='age')

                            vk.messages.send(user_id=user_id, random_id=get_random_id(), message=QUESTION_4)
                            save_data(vk_obj=vk, container=user_data, user_id=user_id, key='phone')

                            vk.messages.send(user_id=user_id, random_id=get_random_id(), message=QUESTION_5)
                            save_data(vk_obj=vk, container=user_data, user_id=user_id, key='address')
                            print(user_data)

                            insert_user_to_db(user_data[user_id])
                            print("–Æ–∑–µ—Ä –≤ –±–∞–∑–µ –¥–ª—è —é–∑–µ—Ä–æ–≤")

                            vk.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                keyboard=main_menu_kb.get_keyboard(),
                                message="–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª, –º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–±–æ—Ä—É –±–ª—é–¥ )"
                            )

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ callback –∫–Ω–æ–ø–∫–∞–º
        elif event.type == VkBotEventType.MESSAGE_EVENT:
            if event.object.payload.get("type") in CALLBACK_TYPES:
                r = vk.messages.sendMessageEventAnswer(
                    event_id=event.object.event_id,
                    user_id=event.object.user_id,
                    peer_id=event.object.peer_id,
                    event_data=json.dumps(event.object.payload),
                )
            if event.object.payload.get("type") == "n":
                if event.object.payload.get("flag") == 1:
                    num = event.object.payload.get("num")
                    vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=keyb_gen(category_list, num, 1).get_keyboard()
                    )
                elif event.object.payload.get("flag") == 2:
                    num = event.object.payload.get("num")
                    index = event.object.payload.get("flag2")
                    vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message="–í—ã–±–∏—Ä–∞–π '–±–ª—é–¥–æ'",
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=keyb_gen(name_and_price_for_dish_btn(category_list[index][:-1]), num, 2, index).get_keyboard()
                    )

            elif event.object.payload.get("type") == "b":
                if event.object.payload.get("flag") == 1:
                    num = event.object.payload.get("num")
                    vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=keyb_gen(category_list, num, 1).get_keyboard()
                    )
                elif event.object.payload.get("flag") == 2:
                    num = event.object.payload.get("num")
                    index = event.object.payload.get("flag2")
                    vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='–í—ã–±–∏—Ä–∞–π "–±–ª—é–¥–æ"',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=keyb_gen(name_and_price_for_dish_btn(category_list[index][:-1]), num, 2, index).get_keyboard()
                    )

            if event.object.payload.get("type") == "m":
                vk.messages.send(
                    random_id=get_random_id(),
                    peer_id=event.obj.peer_id,
                    keyboard=keyb_gen(list=category_list, num=0, flag=1).get_keyboard(),
                    message='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥',
                )

            if event.object.payload.get("type") == "o":
                vk.messages.send(
                    random_id=get_random_id(),
                    peer_id=event.obj.peer_id,
                    keyboard=order_kb().get_keyboard(),
                    message='–í–ê–® –ó–ê–ö–ê–ó \n–í—Å—ë –≤–µ—Ä–Ω–æ?\n\n' + make_order_description(user_order)
                )

    print(f'USER_ORDER - {user_order}')


if __name__ == "__main__":
    main()